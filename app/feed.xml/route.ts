import type { MetadataRoute } from "next"

// üîπ Fetch —Å—Ç–∞—Ç–∏–∏ –∑–∞ RSS Feed
async function getRSSArticles() {
  try {
    const response = await fetch(
      `https://lunaro.sofia-today.org/wp-json/wp/v2/posts?per_page=50&_embed`,
      { next: { revalidate: 0 } } // –ë–ï–ó –∫–µ—à–∏—Ä–∞–Ω–µ –∑–∞ –∞–∫—Ç—É–∞–ª–Ω–∏ –Ω–æ–≤–∏–Ω–∏
    )

    if (!response.ok) {
      return []
    }

    const articles = await response.json()
    
    // –§–∏–ª—Ç—Ä–∏—Ä–∞–π —Å–∞–º–æ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–∏—Ç–µ —Å—Ç–∞—Ç–∏–∏
    const publishedArticles = articles.filter((article: any) => article.status === 'publish')
    
    return publishedArticles
  } catch (error) {
    return []
  }
}

// üîπ –û—á–∏—Å—Ç–∏ HTML –æ—Ç —Å—Ç–∞—Ç–∏–∏—Ç–µ
function cleanHTML(html: string): string {
  return html
    .replace(/<[^>]*>/g, '') // –ü—Ä–µ–º–∞—Ö–Ω–∏ HTML —Ç–∞–≥–æ–≤–µ—Ç–µ
    .replace(/&nbsp;/g, ' ') // –ó–∞–º–µ–Ω–∏ &nbsp; —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª
    .replace(/&amp;/g, '&') // –ó–∞–º–µ–Ω–∏ &amp; —Å &
    .replace(/&lt;/g, '<') // –ó–∞–º–µ–Ω–∏ &lt; —Å <
    .replace(/&gt;/g, '>') // –ó–∞–º–µ–Ω–∏ &gt; —Å >
    .replace(/&quot;/g, '"') // –ó–∞–º–µ–Ω–∏ &quot; —Å "
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å –µ–¥–∏–Ω
    .trim()
}

// üîπ –ì–µ–Ω–µ—Ä–∏—Ä–∞–π –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
function generateDescription(article: any): string {
  const excerpt = cleanHTML(article.excerpt?.rendered || '')
  const content = cleanHTML(article.content?.rendered || '')
  
  // –ò–∑–ø–æ–ª–∑–≤–∞–π excerpt –∞–∫–æ –µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥—ä–ª–≥–æ, –∏–Ω–∞—á–µ –≤–∑–µ–º–∏ –ø—ä—Ä–≤–∏—Ç–µ 300 —Å–∏–º–≤–æ–ª–∞ –æ—Ç —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
  if (excerpt && excerpt.length > 100) {
    return excerpt.substring(0, 300) + (excerpt.length > 300 ? '...' : '')
  } else if (content) {
    return content.substring(0, 300) + (content.length > 300 ? '...' : '')
  }
  
  return '–°—Ç–∞—Ç–∏—è –æ—Ç Lunaro News'
}

export async function GET(): Promise<Response> {
  try {
    const baseUrl = "https://lunaro.news"
    const articles = await getRSSArticles()
    const buildDate = new Date().toUTCString()
    
    // üîπ –ì–µ–Ω–µ—Ä–∏—Ä–∞–π RSS XML
    const rssFeed = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lunaro News - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∏ –Ω–æ–≤–∏–Ω–∏ –æ—Ç –ë—ä–ª–≥–∞—Ä–∏—è</title>
    <description>–°–ª–µ–¥–µ—Ç–µ –Ω–∞–π-–≤–∞–∂–Ω–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∏ –Ω–æ–≤–∏–Ω–∏, –∞–Ω–∞–ª–∏–∑–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤–µ –≤ –∫–∏–±–µ—Ä—Å–∏–≥—É—Ä–Ω–æ—Å—Ç—Ç–∞, SEO, AI –∏ –¥–∏–≥–∏—Ç–∞–ª–Ω–∞—Ç–∞ –∏–Ω–æ–≤–∞—Ü–∏—è</description>
    <link>${baseUrl}</link>
    <language>bg</language>
    <copyright>Copyright ¬© 2024 Lunaro News. –í—Å–∏—á–∫–∏ –ø—Ä–∞–≤–∞ –∑–∞–ø–∞–∑–µ–Ω–∏.</copyright>
    <managingEditor>editor@lunaro.news (Lunaro News Team)</managingEditor>
    <webMaster>webmaster@lunaro.news (Lunaro News Team)</webMaster>
    <lastBuildDate>${buildDate}</lastBuildDate>
    <pubDate>${buildDate}</pubDate>
    <ttl>60</ttl>
    <image>
      <url>${baseUrl}/logo-desktop.png</url>
      <title>Lunaro News</title>
      <link>${baseUrl}</link>
      <width>300</width>
      <height>60</height>
    </image>
    <atom:link href="${baseUrl}/feed.xml" rel="self" type="application/rss+xml"/>
    
    ${articles.map((article: any) => {
      const articleDate = new Date(article.date)
      const pubDate = articleDate.toUTCString()
      const link = `${baseUrl}/article/${article.slug}`
      const title = cleanHTML(article.title.rendered)
      const description = generateDescription(article)
      const category = article._embedded?.["wp:term"]?.[0]?.[0]?.name || "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
      const featuredImage = article._embedded?.["wp:featuredmedia"]?.[0]?.source_url || `${baseUrl}/placeholder.jpg`
      const author = article._embedded?.author?.[0]?.name || "Lunaro News Team"
      
      return `    <item>
      <title><![CDATA[${title}]]></title>
      <description><![CDATA[${description}]]></description>
      <link>${link}</link>
      <guid isPermaLink="true">${link}</guid>
      <pubDate>${pubDate}</pubDate>
      <author><![CDATA[${author}]]></author>
      <category><![CDATA[${category}]]></category>
      <enclosure url="${featuredImage}" type="image/jpeg"/>
      <content:encoded><![CDATA[${article.content?.rendered || description}]]></content:encoded>
    </item>`
    }).join('\n')}
    
  </channel>
</rss>`

    return new Response(rssFeed, {
      status: 200,
      headers: {
        'Content-Type': 'application/rss+xml; charset=utf-8',
        'Cache-Control': 'public, max-age=1800, s-maxage=1800', // –ö–µ—à–∏—Ä–∞–π –∑–∞ 30 –º–∏–Ω—É—Ç–∏
      },
    })
  } catch (error) {
    // –í—Ä—ä—â–∞–π –ø—Ä–∞–∑–µ–Ω RSS –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
    const emptyRSS = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Lunaro News</title>
    <description>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∏ –Ω–æ–≤–∏–Ω–∏ –æ—Ç –ë—ä–ª–≥–∞—Ä–∏—è</description>
    <link>https://lunaro.news</link>
    <language>bg</language>
    <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>
  </channel>
</rss>`
    
    return new Response(emptyRSS, {
      status: 200,
      headers: {
        'Content-Type': 'application/rss+xml; charset=utf-8',
        'Cache-Control': 'public, max-age=300', // –ö–µ—à–∏—Ä–∞–π –∑–∞ 5 –º–∏–Ω—É—Ç–∏ –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
      },
    })
  }
}
