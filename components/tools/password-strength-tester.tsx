"use client"

import { useState, useMemo } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Lock, Eye, EyeOff, CheckCircle, XCircle, AlertTriangle, Shield } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface PasswordCheck {
  name: string
  passed: boolean
  description: string
}

export function PasswordStrengthTester() {
  const [password, setPassword] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [checks, setChecks] = useState<PasswordCheck[]>([])

  const passwordChecks = useMemo(() => {
    const checks: PasswordCheck[] = [
      {
        name: "–î—ä–ª–∂–∏–Ω–∞",
        passed: password.length >= 12,
        description: `–ú–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–∞ (—Ç–µ–∫—É—â–æ: ${password.length})`
      },
      {
        name: "–ì–æ–ª–µ–º–∏ –±—É–∫–≤–∏",
        passed: /[A-Z]/.test(password),
        description: "–°—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ –≥–ª–∞–≤–Ω–∞ –±—É–∫–≤–∞"
      },
      {
        name: "–ú–∞–ª–∫–∏ –±—É–∫–≤–∏",
        passed: /[a-z]/.test(password),
        description: "–°—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ –º–∞–ª–∫–∞ –±—É–∫–≤–∞"
      },
      {
        name: "–¶–∏—Ñ—Ä–∏",
        passed: /\d/.test(password),
        description: "–°—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞"
      },
      {
        name: "–°–ø–µ—Ü–∏–∞–ª–Ω–∏ –∑–Ω–∞—Ü–∏",
        passed: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password),
        description: "–°—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ –µ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª–µ–Ω –∑–Ω–∞–∫"
      },
      {
        name: "–ë–µ–∑ –æ–±—â–∏ –¥—É–º–∏",
        passed: !/(password|123456|qwerty|admin|letmein)/i.test(password),
        description: "–ù–µ —Å—ä–¥—ä—Ä–∂–∞ –æ–±—â–∏ –¥—É–º–∏ –∏–ª–∏ —à–∞–±–ª–æ–Ω–∏"
      },
      {
        name: "–ë–µ–∑ –ø–æ–≤—Ç–∞—Ä—è—â–∏ —Å–µ —Å–∏–º–≤–æ–ª–∏",
        passed: !/(.)\1{2,}/.test(password),
        description: "–ù—è–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç 2 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –µ–¥–Ω–∞–∫–≤–∏ —Å–∏–º–≤–æ–ª–∞"
      },
      {
        name: "–ë–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏",
        passed: !/(abc|123|qwe|asd)/i.test(password),
        description: "–ù—è–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏ (abc, 123, etc.)"
      }
    ]

    setChecks(checks)
    return checks
  }, [password])

  const getStrengthScore = () => {
    if (password.length === 0) return 0
    const passedChecks = passwordChecks.filter(check => check.passed).length
    return Math.round((passedChecks / passwordChecks.length) * 100)
  }

  const getStrengthLevel = () => {
    const score = getStrengthScore()
    if (score >= 80) return { level: "–ú–Ω–æ–≥–æ —Å–∏–ª–Ω–∞", color: "text-green-600", bgColor: "bg-green-100" }
    if (score >= 60) return { level: "–°–∏–ª–Ω–∞", color: "text-blue-600", bgColor: "bg-blue-100" }
    if (score >= 40) return { level: "–°—Ä–µ–¥–Ω–∞", color: "text-yellow-600", bgColor: "bg-yellow-100" }
    if (score >= 20) return { level: "–°–ª–∞–±–∞", color: "text-orange-600", bgColor: "bg-orange-100" }
    return { level: "–ú–Ω–æ–≥–æ —Å–ª–∞–±–∞", color: "text-red-600", bgColor: "bg-red-100" }
  }

  const generateStrongPassword = () => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?"
    let password = ""
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –ø–∞—Ä–æ–ª–∞ —Å –ø–æ–Ω–µ –µ–¥–∏–Ω —Å–∏–º–≤–æ–ª –æ—Ç –≤—Å—è–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    password += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random() * 26)]
    password += "abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random() * 26)]
    password += "0123456789"[Math.floor(Math.random() * 10)]
    password += "!@#$%^&*()_+-=[]{}|;:,.<>?"[Math.floor(Math.random() * 32)]
    
    // –î–æ–±–∞–≤—è–º–µ –æ—â–µ —Å–∏–º–≤–æ–ª–∏ –¥–æ 16 –æ–±—â–æ
    for (let i = 4; i < 16; i++) {
      password += chars[Math.floor(Math.random() * chars.length)]
    }
    
    // –†–∞–∑–±—ä—Ä–∫–≤–∞–º–µ —Å–∏–º–≤–æ–ª–∏—Ç–µ
    setPassword(password.split('').sort(() => Math.random() - 0.5).join(''))
    
    toast({
      title: "–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞ –ø–∞—Ä–æ–ª–∞",
      description: "–ù–æ–≤–∞ —Å–∏–ª–Ω–∞ –ø–∞—Ä–æ–ª–∞ –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞."
    })
  }

  const copyPassword = async () => {
    try {
      await navigator.clipboard.writeText(password)
      toast({
        title: "–ö–æ–ø–∏—Ä–∞–Ω–æ!",
        description: "–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –∫–æ–ø–∏—Ä–∞–Ω–∞ –≤ –∫–ª–∏–ø–±–æ—Ä–¥–∞."
      })
    } catch (err) {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–ù–µ—É—Å–ø–µ—à–Ω–æ –∫–æ–ø–∏—Ä–∞–Ω–µ –≤ –∫–ª–∏–ø–±–æ—Ä–¥–∞.",
        variant: "destructive"
      })
    }
  }

  const clearPassword = () => {
    setPassword("")
    setChecks([])
  }

  const strength = getStrengthLevel()

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Lock className="h-5 w-5 text-green-600" />
          –¢–µ—Å—Ç –∑–∞ —Å–∏–ª–Ω–∏ –ø–∞—Ä–æ–ª–∏
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="password">–í—ä–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞ –∑–∞ —Ç–µ—Å—Ç</Label>
            <div className="flex gap-2">
              <div className="relative flex-1">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="–í—ä–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞..."
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="pr-10"
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeOff className="h-4 w-4" />
                  ) : (
                    <Eye className="h-4 w-4" />
                  )}
                </Button>
              </div>
              <Button variant="outline" onClick={generateStrongPassword}>
                <Shield className="h-4 w-4 mr-2" />
                –ì–µ–Ω–µ—Ä–∏—Ä–∞–π
              </Button>
            </div>
          </div>
        </div>

        {password && (
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-3">
                <Lock className="h-5 w-5 text-green-600" />
                <div>
                  <h3 className="font-semibold">–ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞</h3>
                  <p className="text-sm text-muted-foreground">
                    –°–∏–ª–∞: {getStrengthScore()}% ({passwordChecks.filter(c => c.passed).length}/{passwordChecks.length} –∫—Ä–∏—Ç–µ—Ä–∏—è)
                  </p>
                </div>
              </div>
              <Badge className={`${strength.bgColor} ${strength.color} border-0`}>
                {strength.level}
              </Badge>
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span>–°–∏–ª–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞</span>
                <span>{getStrengthScore()}%</span>
              </div>
              <Progress value={getStrengthScore()} className="h-2" />
            </div>

            <div className="space-y-2">
              {passwordChecks.map((check, index) => (
                <div key={index} className="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-center gap-3">
                    {check.passed ? (
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    ) : (
                      <XCircle className="h-4 w-4 text-red-500" />
                    )}
                    <div>
                      <p className="font-medium">{check.name}</p>
                      <p className="text-sm text-muted-foreground">{check.description}</p>
                    </div>
                  </div>
                  <Badge variant={check.passed ? "default" : "destructive"} className="text-xs">
                    {check.passed ? "‚úì" : "‚úó"}
                  </Badge>
                </div>
              ))}
            </div>

            <div className="flex gap-2">
              <Button variant="outline" onClick={copyPassword} className="flex-1">
                <Lock className="h-4 w-4 mr-2" />
                –ö–æ–ø–∏—Ä–∞–π –ø–∞—Ä–æ–ª–∞
              </Button>
              <Button variant="outline" onClick={clearPassword}>
                –ò–∑—á–∏—Å—Ç–∏
              </Button>
            </div>
          </div>
        )}

        <div className="bg-green-50 dark:bg-green-950/20 p-4 rounded-lg">
          <h4 className="font-semibold text-green-900 dark:text-green-100 mb-2">
            üîê –°—ä–≤–µ—Ç–∏ –∑–∞ —Å–∏–≥—É—Ä–Ω–∏ –ø–∞—Ä–æ–ª–∏:
          </h4>
          <ul className="text-sm text-green-800 dark:text-green-200 space-y-1">
            <li>‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –ø–æ–Ω–µ 12 —Å–∏–º–≤–æ–ª–∞</li>
            <li>‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–∞–π—Ç–µ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ –∑–Ω–∞—Ü–∏</li>
            <li>‚Ä¢ –ò–∑–±—è–≥–≤–∞–π—Ç–µ –ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏ –∏ –æ–±—â–∏ –¥—É–º–∏</li>
            <li>‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª–Ω–∞ –ø–∞—Ä–æ–ª–∞ –∑–∞ –≤—Å–µ–∫–∏ –∞–∫–∞—É–Ω—Ç</li>
            <li>‚Ä¢ –û–±–Ω–æ–≤—è–≤–∞–π—Ç–µ –ø–∞—Ä–æ–ª–∏—Ç–µ —Ä–µ–¥–æ–≤–Ω–æ</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  )
}
