"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Shield, CheckCircle, XCircle, AlertTriangle, Globe, Lock, Eye } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface HeaderResult {
  name: string
  value: string
  status: 'good' | 'warning' | 'missing'
  description: string
  recommendation?: string
}

export function HTTPHeadersAnalyzer() {
  const [url, setUrl] = useState("")
  const [headers, setHeaders] = useState<HeaderResult[]>([])
  const [loading, setLoading] = useState(false)

  const analyzeHeaders = async () => {
    if (!url.trim()) {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ URL –∞–¥—Ä–µ—Å –∑–∞ –∞–Ω–∞–ª–∏–∑.",
        variant: "destructive"
      })
      return
    }

    setLoading(true)
    setHeaders([])

    try {
      // –°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ HTTP headers –∞–Ω–∞–ª–∏–∑
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // –°–∏–º—É–ª–∏—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
      const mockHeaders: HeaderResult[] = [
        {
          name: "Strict-Transport-Security (HSTS)",
          value: "max-age=31536000; includeSubDomains",
          status: 'good',
          description: "HSTS –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω —Å –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç",
          recommendation: "–û—Ç–ª–∏—á–Ω–æ! HSTS –∑–∞—â–∏—Ç–∞–≤–∞ –æ—Ç downgrade –∞—Ç–∞–∫–∏."
        },
        {
          name: "Content-Security-Policy (CSP)",
          value: "default-src 'self'; script-src 'self' 'unsafe-inline'",
          status: 'warning',
          description: "CSP –µ –Ω–∞–ª–∏—á–µ–Ω, –Ω–æ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø–æ-—Å—Ç—Ä–æ–≥",
          recommendation: "–ü—Ä–µ–ø–æ—Ä—ä—á–≤–∞–º–µ –ø–æ-—Å—Ç—Ä–æ–≥–∏ CSP –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç."
        },
        {
          name: "X-Frame-Options",
          value: "DENY",
          status: 'good',
          description: "–ó–∞—â–∏—Ç–∞–≤–∞ –æ—Ç clickjacking –∞—Ç–∞–∫–∏",
          recommendation: "–û—Ç–ª–∏—á–Ω–æ! X-Frame-Options –µ –ø—Ä–∞–≤–∏–ª–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        },
        {
          name: "X-Content-Type-Options",
          value: "nosniff",
          status: 'good',
          description: "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ MIME type sniffing –∞—Ç–∞–∫–∏",
          recommendation: "–û—Ç–ª–∏—á–Ω–æ! X-Content-Type-Options –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω."
        },
        {
          name: "Referrer-Policy",
          value: "strict-origin-when-cross-origin",
          status: 'good',
          description: "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ referrer –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
          recommendation: "–î–æ–±—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∏–≥—É—Ä–Ω–æ—Å—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç."
        },
        {
          name: "Permissions-Policy",
          value: "",
          status: 'missing',
          description: "Permissions-Policy header –ª–∏–ø—Å–≤–∞",
          recommendation: "–î–æ–±–∞–≤–µ—Ç–µ Permissions-Policy –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª –Ω–∞ –±—Ä–∞—É–∑—ä—Ä–Ω–∏ API."
        },
        {
          name: "X-XSS-Protection",
          value: "1; mode=block",
          status: 'warning',
          description: "X-XSS-Protection –µ deprecated –≤ –º–æ–¥–µ—Ä–Ω–∏—Ç–µ –±—Ä–∞—É–∑—ä—Ä–∏",
          recommendation: "–ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ Content-Security-Policy –≤–º–µ—Å—Ç–æ X-XSS-Protection."
        }
      ]

      setHeaders(mockHeaders)
      
      toast({
        title: "–ê–Ω–∞–ª–∏–∑—ä—Ç –∑–∞–≤—ä—Ä—à–∏",
        description: "HTTP headers —Å–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ."
      })
    } catch (error) {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ HTTP headers.",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'good':
        return <CheckCircle className="h-5 w-5 text-green-500" />
      case 'warning':
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />
      case 'missing':
        return <XCircle className="h-5 w-5 text-red-500" />
      default:
        return <XCircle className="h-5 w-5 text-gray-500" />
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'good':
        return <Badge variant="default" className="bg-green-100 text-green-800">–î–æ–±—Ä–æ</Badge>
      case 'warning':
        return <Badge variant="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</Badge>
      case 'missing':
        return <Badge variant="destructive">–õ–∏–ø—Å–≤–∞</Badge>
      default:
        return <Badge variant="secondary">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>
    }
  }

  const getSecurityScore = () => {
    if (headers.length === 0) return 0
    const goodCount = headers.filter(h => h.status === 'good').length
    return Math.round((goodCount / headers.length) * 100)
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="h-5 w-5 text-blue-600" />
          –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ HTTP Headers
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="url">URL –∞–¥—Ä–µ—Å –∑–∞ –∞–Ω–∞–ª–∏–∑</Label>
            <div className="flex gap-2">
              <Input
                id="url"
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && analyzeHeaders()}
              />
              <Button 
                onClick={analyzeHeaders} 
                disabled={loading}
                className="min-w-[120px]"
              >
                {loading ? (
                  <>
                    <Eye className="h-4 w-4 mr-2 animate-spin" />
                    –ê–Ω–∞–ª–∏–∑–∏—Ä–∞...
                  </>
                ) : (
                  <>
                    <Shield className="h-4 w-4 mr-2" />
                    –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>

        {headers.length > 0 && (
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-3">
                <Globe className="h-5 w-5 text-blue-600" />
                <div>
                  <h3 className="font-semibold">{url}</h3>
                  <p className="text-sm text-muted-foreground">
                    Security Score: {getSecurityScore()}% ({headers.filter(h => h.status === 'good').length}/{headers.length} –¥–æ–±—Ä–∏)
                  </p>
                </div>
              </div>
              <Badge variant={getSecurityScore() >= 80 ? "default" : getSecurityScore() >= 60 ? "warning" : "destructive"}>
                {getSecurityScore()}%
              </Badge>
            </div>

            <div className="space-y-4">
              {headers.map((header, index) => (
                <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-3">
                      {getStatusIcon(header.status)}
                      <div>
                        <h4 className="font-semibold">{header.name}</h4>
                        <p className="text-sm text-muted-foreground">{header.description}</p>
                      </div>
                    </div>
                    {getStatusBadge(header.status)}
                  </div>
                  
                  {header.value && (
                    <div className="mb-3">
                      <Label className="text-sm font-medium">–°—Ç–æ–π–Ω–æ—Å—Ç:</Label>
                      <div className="mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded text-sm font-mono">
                        {header.value}
                      </div>
                    </div>
                  )}

                  {header.recommendation && (
                    <div className="p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg">
                      <div className="flex items-start gap-2">
                        <Lock className="h-4 w-4 text-blue-600 mt-0.5" />
                        <div>
                          <p className="text-sm font-medium text-blue-900 dark:text-blue-100">–ü—Ä–µ–ø–æ—Ä—ä–∫–∞:</p>
                          <p className="text-sm text-blue-800 dark:text-blue-200">{header.recommendation}</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg">
          <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
            üîí –ó–∞—â–æ —Å–∞ –≤–∞–∂–Ω–∏ HTTP Security Headers?
          </h4>
          <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-1">
            <li>‚Ä¢ <strong>HSTS</strong> - –∑–∞—â–∏—Ç–∞–≤–∞ –æ—Ç downgrade –∞—Ç–∞–∫–∏</li>
            <li>‚Ä¢ <strong>CSP</strong> - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ XSS –∞—Ç–∞–∫–∏</li>
            <li>‚Ä¢ <strong>X-Frame-Options</strong> - –∑–∞—â–∏—Ç–∞–≤–∞ –æ—Ç clickjacking</li>
            <li>‚Ä¢ <strong>X-Content-Type-Options</strong> - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ MIME sniffing</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  )
}
