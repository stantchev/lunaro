"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Shield, AlertTriangle, CheckCircle, XCircle, Search, Eye, Lock } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface Vulnerability {
  id: string
  name: string
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info'
  description: string
  recommendation: string
  cve?: string
  status: 'found' | 'not_found' | 'checking'
}

export function VulnerabilityScanner() {
  const [url, setUrl] = useState("")
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [loading, setLoading] = useState(false)
  const [scanComplete, setScanComplete] = useState(false)

  const scanForVulnerabilities = async () => {
    if (!url.trim()) {
      toast({
        title: "Грешка",
        description: "Моля, въведете URL адрес за сканиране.",
        variant: "destructive"
      })
      return
    }

    setLoading(true)
    setVulnerabilities([])
    setScanComplete(false)

    try {
      // Симулация на vulnerability scan
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Симулирани резултати
      const mockVulnerabilities: Vulnerability[] = [
        {
          id: "sql-injection",
          name: "SQL Injection уязвимост",
          severity: 'critical',
          description: "Възможност за SQL injection атаки чрез URL параметри",
          recommendation: "Използвайте prepared statements и валидирайте всички входни данни",
          cve: "CVE-2023-1234",
          status: 'found'
        },
        {
          id: "xss",
          name: "Cross-Site Scripting (XSS)",
          severity: 'high',
          description: "Открити XSS уязвимости в форми за коментари",
          recommendation: "Имплементирайте Content Security Policy (CSP) и валидирайте входните данни",
          cve: "CVE-2023-5678",
          status: 'found'
        },
        {
          id: "csrf",
          name: "Cross-Site Request Forgery (CSRF)",
          severity: 'medium',
          description: "Липсват CSRF токени в критични форми",
          recommendation: "Добавете CSRF токени за всички state-changing операции",
          status: 'found'
        },
        {
          id: "directory-traversal",
          name: "Directory Traversal",
          severity: 'high',
          description: "Възможност за достъп до файлове извън web root",
          recommendation: "Валидирайте и санкционирайте всички file path параметри",
          cve: "CVE-2023-9012",
          status: 'not_found'
        },
        {
          id: "insecure-headers",
          name: "Несигурни HTTP Headers",
          severity: 'medium',
          description: "Липсват важни security headers",
          recommendation: "Добавете HSTS, CSP, X-Frame-Options и други security headers",
          status: 'found'
        },
        {
          id: "outdated-software",
          name: "Остарял софтуер",
          severity: 'low',
          description: "Открити остарели версии на библиотеки",
          recommendation: "Обновете всички зависимости до най-новите версии",
          status: 'found'
        },
        {
          id: "information-disclosure",
          name: "Разкриване на информация",
          severity: 'low',
          description: "Сървърът разкрива твърде много техническа информация",
          recommendation: "Намалете verbosity на error съобщенията",
          status: 'not_found'
        }
      ]

      setVulnerabilities(mockVulnerabilities)
      setScanComplete(true)
      
      const criticalCount = mockVulnerabilities.filter(v => v.severity === 'critical' && v.status === 'found').length
      const highCount = mockVulnerabilities.filter(v => v.severity === 'high' && v.status === 'found').length
      
      toast({
        title: "Сканирането завърши",
        description: `Намерени ${criticalCount} критични и ${highCount} високи уязвимости.`
      })
    } catch (error) {
      toast({
        title: "Грешка",
        description: "Възникна грешка при сканирането за уязвимости.",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <XCircle className="h-4 w-4 text-red-500" />
      case 'high':
        return <AlertTriangle className="h-4 w-4 text-orange-500" />
      case 'medium':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />
      case 'low':
        return <CheckCircle className="h-4 w-4 text-blue-500" />
      default:
        return <CheckCircle className="h-4 w-4 text-gray-500" />
    }
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="destructive">Критично</Badge>
      case 'high':
        return <Badge variant="destructive">Високо</Badge>
      case 'medium':
        return <Badge variant="warning">Средно</Badge>
      case 'low':
        return <Badge variant="secondary">Ниско</Badge>
      default:
        return <Badge variant="outline">Информация</Badge>
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'found':
        return <XCircle className="h-4 w-4 text-red-500" />
      case 'not_found':
        return <CheckCircle className="h-4 w-4 text-green-500" />
      default:
        return <Eye className="h-4 w-4 text-gray-500" />
    }
  }

  const getSecurityScore = () => {
    if (vulnerabilities.length === 0) return 0
    const foundVulns = vulnerabilities.filter(v => v.status === 'found')
    const criticalCount = foundVulns.filter(v => v.severity === 'critical').length
    const highCount = foundVulns.filter(v => v.severity === 'high').length
    const mediumCount = foundVulns.filter(v => v.severity === 'medium').length
    
    const score = 100 - (criticalCount * 30 + highCount * 20 + mediumCount * 10)
    return Math.max(0, score)
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="h-5 w-5 text-red-600" />
          Сканер за уязвимости
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="url">URL адрес за сканиране</Label>
            <div className="flex gap-2">
              <Input
                id="url"
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && scanForVulnerabilities()}
              />
              <Button 
                onClick={scanForVulnerabilities} 
                disabled={loading}
                className="min-w-[120px]"
              >
                {loading ? (
                  <>
                    <Search className="h-4 w-4 mr-2 animate-spin" />
                    Сканира...
                  </>
                ) : (
                  <>
                    <Shield className="h-4 w-4 mr-2" />
                    Сканирай
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>

        {scanComplete && (
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-3">
                <Shield className="h-5 w-5 text-red-600" />
                <div>
                  <h3 className="font-semibold">Резултати от сканирането</h3>
                  <p className="text-sm text-muted-foreground">
                    Security Score: {getSecurityScore()}% | 
                    Намерени: {vulnerabilities.filter(v => v.status === 'found').length} уязвимости
                  </p>
                </div>
              </div>
              <Badge variant={getSecurityScore() >= 80 ? "default" : getSecurityScore() >= 60 ? "warning" : "destructive"}>
                {getSecurityScore()}%
              </Badge>
            </div>

            {getSecurityScore() < 70 && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Внимание!</strong> Намерени са критични уязвимости. Препоръчваме незабавно действие.
                </AlertDescription>
              </Alert>
            )}

            <div className="space-y-3">
              {vulnerabilities.map((vuln, index) => (
                <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-3">
                      {getSeverityIcon(vuln.severity)}
                      <div>
                        <h4 className="font-semibold">{vuln.name}</h4>
                        <p className="text-sm text-muted-foreground">{vuln.description}</p>
                        {vuln.cve && (
                          <p className="text-xs text-blue-600 font-mono">{vuln.cve}</p>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {getStatusIcon(vuln.status)}
                      {getSeverityBadge(vuln.severity)}
                    </div>
                  </div>
                  
                  {vuln.status === 'found' && (
                    <div className="p-3 bg-red-50 dark:bg-red-950/20 rounded-lg">
                      <div className="flex items-start gap-2">
                        <Lock className="h-4 w-4 text-red-600 mt-0.5" />
                        <div>
                          <p className="text-sm font-medium text-red-900 dark:text-red-100">Препоръка:</p>
                          <p className="text-sm text-red-800 dark:text-red-200">{vuln.recommendation}</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="bg-red-50 dark:bg-red-950/20 p-4 rounded-lg">
          <h4 className="font-semibold text-red-900 dark:text-red-100 mb-2">
            ⚠️ Важно за сканирането:
          </h4>
          <ul className="text-sm text-red-800 dark:text-red-200 space-y-1">
            <li>• Това е демонстрационен инструмент с симулирани резултати</li>
            <li>• За реални уязвимости използвайте професионални инструменти</li>
            <li>• Винаги тествайте в контролирана среда</li>
            <li>• Получавайте разрешение преди тестване на чужд сайт</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  )
}
